// Generated by CoffeeScript 1.8.0
(function() {
  var LayerControl;

  LayerControl = function(options) {
    mapboxgl.util.setOptions(this, options);
  };

  LayerControl.prototype = mapboxgl.util.inherit(mapboxgl.Control, {
    _map: null,
    options: {
      layers: {},
      position: 'top-right'
    },
    _createElement: function(tagName, className, container, text) {
      var el, t;
      if (className == null) {
        className = null;
      }
      if (container == null) {
        container = null;
      }
      if (text == null) {
        text = null;
      }
      el = document.createElement(tagName);
      if (className) {
        el.className = className;
      }
      if (container) {
        container.appendChild(el);
      }
      if (text) {
        t = document.createTextNode(text);
        el.appendChild(t);
      }
      return el;
    },
    _createButton: function(className, container, fn) {
      var a;
      a = this._createElement('button', className, container);
      a.addEventListener('click', function() {
        return fn();
      });
      return a;
    },
    closedLayers: function(layers) {
      return this.map.batch(function(b) {
        var l, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = layers.length; _i < _len; _i++) {
          l = layers[_i];
          _results.push(b.setLayoutProperty(l, 'visibility', 'none'));
        }
        return _results;
      });
    },
    _showLayers: function(layers) {
      return this.map.batch(function(b) {
        var l, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = layers.length; _i < _len; _i++) {
          l = layers[_i];
          _results.push(b.setLayoutProperty(l, 'visibility', 'visible'));
        }
        return _results;
      });
    },
    _onToggleLayer: function(e) {
      var group;
      group = this.options.groups[e.target.name];
      group.visible = !group.visible;
      if (group.visible) {
        return this._showLayers(group.layers);
      } else {
        return this.closedLayers(group.layers);
      }
    },
    _updateLayers: function(panelEl, style) {
      var elementClassName, elementId, group, i, itemEl, name, switchEl, _ref, _results;
      i = 0;
      _ref = this.options.groups;
      _results = [];
      for (name in _ref) {
        group = _ref[name];
        elementClassName = 'mapboxgl-ctrl-layers-switch';
        elementId = 'switch-' + i++;
        itemEl = this._createElement('li', null, panelEl);
        switchEl = this._createElement('div', elementClassName, itemEl);
        switchEl.innerHTML = '<input id="' + elementId + '" name="' + name + '" type="checkbox" class="' + elementClassName + '-checkbox" checked> <label class="' + elementClassName + '-label" for="' + elementId + '">' + name + '</label>';
        _results.push(document.getElementById(elementId).addEventListener('change', this._onToggleLayer.bind(this)));
      }
      return _results;
    },
    onAdd: function(map) {
      var className, containerEl, panelEl;
      this.map = map;
      className = 'mapboxgl-ctrl';
      containerEl = this._createElement('div', className + '-group', map.getContainer());
      panelEl = this._createElement('ul', className + '-layers-panel', containerEl);
      map.on('load', (function(_this) {
        return function() {
          return _this._updateLayers(panelEl, map.style);
        };
      })(this));
      return containerEl;
    }
  });

  mapboxgl.LayerControl = LayerControl;

}).call(this);
